package home_work_1;

public class Task2 {
    public static void main(String[] args) {
        int a = 5;
        int b = 2;
        int c = 8;

        int result1 = a + b / c; // =5;
        // 1. деление 2/8 = 0, т.к. обе переменные int;
        // 2. сложение 5+0 = 5.

        int result2 = (a + b) / c; // =0;
        // 1. действие в скобках (5+2)=7;
        // 2. целочисленное деление 7/8=0.

        int result3 = (a + b++) / c; // =0;
        // 1. действие в скобках (5+2++)=7 (применяется постфиксная форма инкремента, поэтому в выражении будет использоваться текущее значение переменной b=2);
        // 2. целочисленное деление 7/8=0

        b = 2;

        int result4 = (a + b++) / --c; // =1;
        // 1. действие в скобках (5+2++)=7 (применяется постфиксная форма инкремента, поэтому в выражении будет использоваться текущее значение переменной b=2);
        // 2. префиксная форма декремента --c=7;
        // 3. целочисленное деление 7/7=1

        b = 2;
        c = 8;

        int result5 = (a * b >> b++) / --c; // =0;
        // 1.действия в скобках:
        // 1.1 5*2 =10;
        // 1.2 2++ = 2(постфиксная форма инкремента, используем текущее значение = 2);
        // 1.3 10 >> 2 = 2 (побитовый сдвиг вправо на 2 бита: 0000_1010 >> 2 = 0000_0010, что в десятичной системе счисления = 2);
        // 2. префиксный декремент --c=7;
        // 3. целочисленное деление 2/7 = 0

        b = 2;
        c = 8;
        int d = 7;
        int e = 20;
        int f = 68;
        int g = 22;

        int result6 = (a + d > e ? f : g * b >> b++) / --c; // = 1;
        // 1.действие в скобках (внутри скобок тернарный оператор,
        // где a + d > e - условие; f - результат, если условие true; g * b >> b++ - результат, если условие false).
        // 1.1 проверка условия: 5+7>20 = false (сначала сложение, потом сравнение);
        // 1.2 пропускаем f, т.к условие false;
        // 1.3 вычисление значения 22*2>>2++:
        // 1.3.1 22*2=44;
        // 1.3.2 2++ = 2(постфиксная форма инкремента, используем текущее значение = 2);
        // 1.3.3 44 >> 2 = 11 (побитовый сдвиг вправо на 2 бита: 0010_1100 >> 2 = 0000_1011, что в десятичной системе счисления = 11);
        // 2. префиксный декремент --c=7;
        // 3. целочисленное деление 11/7 = 1.

        b = 2;
        c = 8;

        //int result7 = (a + d > e ? f >= f : g * b >> b++) / --c; //Ошибка компиляции;
        //Т.к ожидаемый результат помещен в переменную типа int, то, чтобы программа заработала, результатом тернарного
        // оператора должно быть число и в ветке true (f >= f), и в ветке false (g * b >> b++).
        //У нас же в ветке true (хоть она и не выбирается по условию 5+7>20), остается boolean-значение.
        //А последующая операция деления возможна только с числовыми типами.

        b = 2;
        int h = 6;
        int i = 3;
        int j = 12;
        int k = 119;

        boolean result8 = h - b > i && j * j <= k; // =false;
        //1. 6-2>3 = true;
        //2. 12*12<=119 = false;
        //3. true&&false = false.

        boolean result9 = true && false; // =false;

        System.out.println(result1);
        System.out.println(result2);
        System.out.println(result3);
        System.out.println(result4);
        System.out.println(result5);
        System.out.println(result6);
        System.out.println(result8);
        System.out.println(result9);
    }
}
